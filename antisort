#include"file1.h"
using namespace std;
Node* input()
{
	Node* head = new Node;
	head = NULL;
	int y = 0;
	int x = 0;
	char* line = new char[y + 1];
	int* num = new int[x + 1];
	cin >> line[y];
	while (true) {
		y += 1;
		char* q = new char[y + 1];
		for (int i = 0; i < y; i++) q[i] = line[i];
		delete[]line;
		line = q;
		cin >> line[y];
		if (y > 0) {
			if (line[y] == '1' && line[y - 1] == '-') {
				break;
			}
		}
	}
	num[x] = line[0] - '0';
	for (int i = 1; i <= y; i++) {
		if (line[i] != '-' && line[i] != '>') {
			x += 1;
			int* s = new int[x + 1];
			for (int j = 0; j < x; j++) s[j] = num[j];
			delete[]num;
			num = s;
			num[x] = line[i] - '0';
			if (i < y) {
				if (line[i + 1] != '-' && line[i + 1] != '>') {
					int m = line[i] - '0';
					num[x] = m * 10 + line[i + 1] - '0';
					i += 1;
				}
			}
			else num[x] = line[i] - '0';
		}
	}
	for (int i = 0; i < x; i++) {
		Node* p = new Node;
		p->content = num[i];
		if (head == NULL) {
			head = p;
		}
		else {
			Node* r = head;
			while (r->next != NULL) r = r->next;
			r->next = p;
		}
		p->next = NULL;
	}
	return head;
}


Node* reverseK(Node* head, int k)
{
	Node* s;
	int z = 0;
	for (s = head; s != NULL; s = s->next) z += 1;
	int* num = new int[z];
	int u = 0;
	for (s = head; s != NULL; s = s->next) {
		num[u] = s->content;
		u += 1;
	}
	int time = z / k;
	for (int i = 1; i <= time; i++) {
		for (int j = 0; j < k / 2; j++) {
			int temp = num[(i - 1) * k + j];
			num[(i - 1) * k + j] = num[i * k - j - 1];
			num[i * k - j - 1] = temp;
		}
	}
	Node* new_head = NULL;
	for (int i = 0; i < z; i++) {
		Node* nh = new Node;
		nh->content = num[i];
		if (new_head == NULL) {
			new_head = nh;
			nh->next = NULL;
		}
		else {
			Node* v = new_head;
			while (v->next != NULL)v = v->next;
			v->next = nh;
			nh->next = NULL;
		}
	}
	
	return new_head;
}


void output(Node* head)
{
	Node* q;
	for (q = head; q->next != NULL; q = q->next) cout << q->content << "->";
	cout << q->content;
}


void remove(Node* head)
{
	delete[]head;
}
